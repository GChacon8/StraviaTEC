import React, { useState } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import { Link, useNavigate } from 'react-router-dom';
import '../Css/Styles.css'; 
import Cookies from 'js-cookie';
import ico from "../Images/Ico.jpg";

function RetosActivos() {
  const navigate = useNavigate();

  var ruta1 = [
    [9.9383849, -84.1088645],
    [9.93841, -84.10881],
    [9.93844, -84.10874],
    [9.93845, -84.10864],
    [9.93845, -84.10863],
    [9.93845, -84.10855],
    [9.93844, -84.10844],
    [9.93843, -84.10826],
    [9.93842, -84.10807],
    [9.93841, -84.10788],
    [9.9384, -84.1077],
    [9.93839, -84.10751],
    [9.93838, -84.1074],
    [9.9383, -84.10604],
    [9.9383, -84.10603],
    [9.93828, -84.10568],
    [9.93824, -84.10495],
    [9.93823, -84.10477],
    [9.9382, -84.10421],
    [9.93814, -84.10328],
    [9.93807, -84.10215],
    [9.93806, -84.10119],
    [9.93802, -84.10028],
    [9.938, -84.09983],
    [9.93797, -84.0993],
    [9.93791, -84.09866],
    [9.9379075, -84.0986642],
    [9.93788, -84.09859],
    [9.9378762, -84.0985881],
    [9.9378762, -84.0985881],
    [9.93786, -84.09856],
    [9.93782, -84.09849],
    [9.93778, -84.09845],
    [9.93772, -84.09841],
    [9.93765, -84.09838],
    [9.93753, -84.09834],
    [9.9375263, -84.0983355],
    [9.9372, -84.09832],
    [9.93661, -84.09829],
    [9.93629, -84.09828],
    [9.93584, -84.09827],
    [9.93508, -84.09825],
    [9.93483, -84.09824],
    [9.9343, -84.09821],
    [9.93424, -84.09821],
    [9.93392, -84.09819],
    [9.93384, -84.09819],
    [9.93342, -84.09817],
    [9.93323, -84.09817],
    [9.93304, -84.09819],
    [9.93284, -84.09821],
    [9.9328417, -84.0982058],
    [9.93283, -84.09821],
    [9.93276, -84.09825],
    [9.93268, -84.09831],
    [9.9326838, -84.0983132],
    [9.9326838, -84.0983132],
    [9.93267, -84.09833],
    [9.93265, -84.09835],
    [9.93263, -84.09838],
    [9.93262, -84.09842],
    [9.93262, -84.09846],
    [9.93262, -84.0985],
    [9.93268, -84.09896],
    [9.93277, -84.09982],
    [9.93278, -84.09992],
    [9.9329, -84.10099],
    [9.93306, -84.10269],
    [9.93314, -84.10341],
    [9.93318, -84.10382],
    [9.93333, -84.10541],
    [9.93334, -84.10559],
    [9.93335, -84.10578],
    [9.93336, -84.10596],
    [9.93337, -84.10612],
    [9.93337, -84.10614],
    [9.93339, -84.10632],
    [9.93341, -84.1065],
    [9.93343, -84.10668],
    [9.93345, -84.10687],
    [9.93347, -84.10705],
    [9.93348, -84.10716],
    [9.93362, -84.10898],
    [9.93371, -84.10984],
    [9.93373, -84.11002],
    [9.9337322, -84.1100219],
    [9.9337886, -84.1102055],
    [9.93397, -84.11015],
    [9.93436, -84.11005],
    [9.93466, -84.10998],
    [9.93484, -84.10993],
    [9.93498, -84.10988],
    [9.93502, -84.10987],
    [9.93518, -84.10982],
    [9.93535, -84.10978],
    [9.93551, -84.10973],
    [9.93559, -84.10971],
    [9.93619, -84.10954],
    [9.93699, -84.10933],
    [9.93718, -84.10928],
    [9.93752, -84.10919],
    [9.93802, -84.10908],
    [9.93813, -84.10904],
    [9.93821, -84.10902],
    [9.93823, -84.109],
    [9.9382333, -80.1090036]
  ];

  var ruta2 = [
    [9.9383849, -84.1088645],
    [9.93841, -84.10881],
    [9.93844, -84.10874],
    [9.93845, -84.10864],
    [9.93845, -84.10863],
    [9.93845, -84.10855],
    [9.93844, -84.10844],
    [9.93843, -84.10826],
    [9.93842, -84.10807],
    [9.93841, -84.10788],
    [9.9384, -84.1077],
    [9.93839, -84.10751],
    [9.93838, -84.1074],
    [9.9383, -84.10604],
    [9.9383, -84.10603],
    [9.93828, -84.10568],
    [9.93824, -84.10495],
    [9.93823, -84.10477],
    [9.9382, -84.10421],
    [9.93814, -84.10328],
    [9.93807, -84.10215],
    [9.93806, -84.10119],
    [9.93802, -84.10028],
    [9.938, -84.09983],
    [9.93797, -84.0993],
    [9.93791, -84.09866],
    [9.9379075, -84.0986642],
    [9.93788, -84.09859],
    [9.9378762, -84.0985881],
    [9.9378762, -84.0985881],
    [9.93786, -84.09856],
    [9.93782, -84.09849],
    [9.93778, -84.09845],
    [9.93772, -84.09841],
    [9.93765, -84.09838],
    [9.93753, -84.09834],
    [9.9375263, -84.0983355],
    [9.9372, -84.09832],
    [9.93661, -84.09829],
    [9.93629, -84.09828],
    [9.93584, -84.09827],
    [9.93508, -84.09825],
    [9.93483, -84.09824],
    [9.9343, -84.09821],
    [9.93424, -84.09821],
    [9.93392, -84.09819],
    [9.93384, -84.09819],
    [9.93342, -84.09817],
    [9.93323, -84.09817],
    [9.93304, -84.09819],
    [9.93284, -84.09821],
    [9.9328417, -84.0982058],
    [9.93283, -84.09821],
    [9.93276, -84.09825],
    [9.93268, -84.09831],
    [9.9326838, -84.0983132],
    [9.9326838, -84.0983132],
    [9.93267, -84.09833],
    [9.93265, -84.09835],
    [9.93263, -84.09838],
    [9.93262, -84.09842],
    [9.93262, -84.09846],
    [9.93262, -84.0985],
    [9.93268, -84.09896],
    [9.93277, -84.09982],
    [9.93278, -84.09992],
    [9.9329, -84.10099],
    [9.93306, -84.10269],
    [9.93314, -84.10341],
    [9.93318, -84.10382],
    [9.93333, -84.10541],
    [9.93334, -84.10559],
    [9.93335, -84.10578],
    [9.93336, -84.10596],
    [9.93337, -84.10612],
    [9.93337, -84.10614],
    [9.93339, -84.10632],
    [9.93341, -84.1065],
    [9.93343, -84.10668],
    [9.93345, -84.10687],
    [9.93347, -84.10705],
    [9.93348, -84.10716],
    [9.93362, -84.10898],
    [9.93371, -84.10984],
    [9.93373, -84.11002],
    [9.9337322, -84.1100219],
    [9.9337886, -84.1102055],
    [9.93397, -84.11015],
    [9.93436, -84.11005],
    [9.93466, -84.10998],
    [9.93484, -84.10993],
    [9.93498, -84.10988],
    [9.93502, -84.10987],
    [9.93518, -84.10982],
    [9.93535, -84.10978],
    [9.93551, -84.10973],
    [9.93559, -84.10971],
    [9.93619, -84.10954],
    [9.93699, -84.10933],
    [9.93718, -84.10928],
    [9.93752, -84.10919],
    [9.93802, -84.10908],
    [9.93813, -84.10904],
    [9.93821, -84.10902],
    [9.93823, -84.109],
    [9.9382333, -80.1090036]
  ];

  var RetosInfo = [
    {
      ID: 1,
      Nombre: "Reto de Distancia",
      Fecha: "2023-11-16",
      TipoActividad: "Ciclismo",
      Descripcion: "Correr 20k",
    },
    {
      ID: 2,
      Nombre: "Reto de Velocidad",
      Fecha: "2023-11-20",
      TipoActividad: "Ciclismo",
      Descripcion: "Alcanzar una velocidad de 30 km/h",
    },
    {
      ID: 3,
      Nombre: "Reto de Resistencia",
      Fecha: "2023-11-25",
      TipoActividad: "Carrera",
      Descripcion: "Correr sin parar durante 1 hora",
    },
    {
      ID: 4,
      Nombre: "Reto de Resistencia",
      Fecha: "2023-11-25",
      TipoActividad: "Carrera",
      Descripcion: "Correr sin parar durante 1 hora",
    },
    {
      ID: 5,
      Nombre: "Reto de Resistencia",
      Fecha: "2023-11-25",
      TipoActividad: "Carrera",
      Descripcion: "Correr sin parar durante 1 hora",
    },
  ];
  

  return (
    <div style={{ textAlign: 'center' }}>


    <nav className="navbar navbar-fluid navbar-dark justify-content-between navbarr">
      <div className="container">
        <a className="navbar-brand" href="#">
          <img src={ico} width="50" height="50" alt="" style={{ marginRight: "20px" }} />
          StraviaTec
        </a>
        <ul className="navbar-nav ml-auto">
          <li className="nav-item">
            <Link className="nav-link" to="/StraviaTec">
              Inicio
            </Link>
          </li>
        </ul>
      </div>
    </nav>
    
    <h1 style={{ fontWeight: 'bold', fontSize: '4em' }}>Retos Activos</h1>
      <div className="Carreras">
        {RetosInfo.map(reto => (
          <div key={reto.ID} className='carrera_post'>
            <h2>{reto.Nombre}</h2>
            <p><span style={{ fontWeight: 'bold' }}>Fecha: </span>: {reto.Fecha}</p>
            <p><span style={{ fontWeight: 'bold' }}>Tipo de Actividad: </span>{reto.TipoActividad}</p>
            <p><span style={{ fontWeight: 'bold' }}>Objetivo: </span>{reto.Descripcion}</p>
            <p><span style={{ fontWeight: 'bold' }}>Avance del Deportista: </span>{reto.Avance}</p>
            <p><span style={{ fontWeight: 'bold' }}>DÃ­as Restantes: </span>{calcularDiasRestantes(reto.Fecha)}</p>
          </div>
        ))}
      </div>
    </div>
  );
}

function calcularDiasRestantes(fechaFin) {
  const fechaFinMs = new Date(fechaFin).getTime();
  const hoyMs = new Date().getTime();
  const diferenciaMs = fechaFinMs - hoyMs;
  const diasRestantes = Math.ceil(diferenciaMs / (1000 * 60 * 60 * 24));

  if(diasRestantes < 0){
    return 0;
  } else{
    return diasRestantes;
  }
  
}

export default RetosActivos;
